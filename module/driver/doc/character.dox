/// @page driver_character_page Character device driver
/// @section driver_character_overview Overview
/// Character device driver (embxx::driver::Character) provides a convenient
/// interface for I/O operations over hardware device (peripheral) that
/// supports only single character transmition/reception at a time. 
/// 
/// The operations the driver currently supports are:
/// @li Read number of characters into the buffer.
/// @li Read characters into the buffer until particular character is received.
/// @li Write number of characters from the buffer.
/// @li Cancel current "read" operation.
/// @li Cancel current "write" operation.
///
/// @section driver_character_tutorial How to use
/// Like any other driver in embxx::driver module embxx::driver::Character 
/// depends on and uses an event loop (a variant of embxx::util::EventLoop) to
/// schedule execution of "read/write complete" handlers. To be able to define 
/// a character driver object it is needed to define and instantiate EventLoop one.
/// @code
/// #include "embxx/util/EventLoop.h"
/// typedef embxx::util::EventLoop<...> EventLoop;
/// EventLoop el;
/// @endcode
///
/// embxx::driver::Character also requires device (peripheral) control class to
/// define following interface:
/// @code
/// class CharDevice
/// {
/// public:
///     // Define each character type as CharType
///     typedef char CharType;
///
///     // Start read operation by enabling "read" interrupts (i.e. interrupt 
///     // when there is at least one character to read) and performing other
///     // control operations if necessary. 
///     void startRead();
///
///     // Stop read operation by disablig "read" interrupts (i.e. interrupt 
///     // when there is at least one character to read) and performing other
///     // control operations if necessary. 
///     void startRead();
///
///     // Start write operation by enabling "write" interrupts (i.e. interrupt 
///     // when there is space for at least one character to be written) and
///     // performing other control operations if necessary.
///     void startWrite();
///
///     // Stop write operation by disabling "write" interrupts (i.e. interrupt 
///     // when there is space for at least one character to be written) and
///     // performing other control operations if necessary.
///     void stopWrite();
///
///     // Inquiry whether there is at least one character to be
///     // read. Will be called in the interrupt context. May be called
///     // multiple times in the same interrupt.
///     bool canRead();
///
///     // Inquiry whether there is a space for at least one character to
///     // be written. Will be called in the interrupt context. May be called
///     // multiple times in the same interrupt.
///     bool canWrite();
///
///     // Read one character. Precondition to this call: canRead() returns
///     // true. Will be called in the interrupt context. May be called
///     // multiple times in the same interrupt.
///     CharType read();
///
///     // Write one character. Precondition to this call: canWrite() returns
///     // true. Will be called in the interrupt context. May be called
///     // multiple times in the same interrupt.
///     void write(CharType value);
///
///     // Set the "can read" interrupt callback. Expose signature 
///     // "void (const embxx::error::ErrorStatus&)". The callback must be 
///     // called when there is at least one byte available for read.
///     // The callback will perform multiple canRead() and read() calls
///     // until canRead() returns false.
///     template <typename TFunc>
///     void setCanReadHandler(TFunc&& func);
///
///     // Set the "can write" interrupt callback. Expose signature 
///     // "void (const embxx::error::ErrorStatus&)". The callback must be
///     // called when there is a space for at least one byte to be written. 
///     // The callback will perform multiple canWrite() and write() calls
///     // until canWrite() returns false.
///     template <typename TFunc>
///     void setCanWriteHandler(TFunc&& func);
/// };
/// 
/// CharDevice device;
/// @endcode
///
/// Define and instantiate Character driver as following:
/// @code
/// #include "embxx/driver/Character.h"
/// 
/// // The third and fourth template parameters are default ones
/// typedef embxx::driver::Character<EventLoop, TimerDevice> CharDriver;
/// CharDriver driver(device, el);
/// @endcode 
/// Now it is possible to issue asynchronous read/write requests for the blocks
/// of data. Please note, that it is impossible to issue second read or write
/// request while previous one of the same type hasn't finished (the provided  
/// callback wasn't executed). However it is possible to issue independed read 
/// and write requests at the same time.
///
/// Read block of characters examle:
/// @code
/// CharDriver::CharType buf[128];
/// driver.asyncRead(buf, sizeof(buf)/sizeof(buf[0]), 
///     [](const embxx::error::ErrorStatus& status, std::size_t bytesRead)
///     {
///         ... // Handle read data in this callback.
///     });
/// @endcode
///
/// Read block of characters until specific character is received:
/// @code
/// CharDriver::CharType buf[128];
/// driver.asyncReadUntil(buf, sizeof(buf)/sizeof(buf[0]), '\n' 
///     [](const embxx::error::ErrorStatus& status, std::size_t bytesRead)
///     {
///         ... // Handle read data in this callback.
///     });
/// @endcode
///
/// Write block of characters example:
/// @code
/// CharDriver::CharType buf[128] = {...};
/// driver.asyncWrite(buf, sizeof(buf)/sizeof(buf[0]),
///     [](const embxx::error::ErrorStatus&, std::size_t bytesWritten)
///     {
///         ... // Perform operations after the write is complete in this callback.
///     });
/// @endcode