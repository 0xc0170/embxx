//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

#include <functional>
#include <string>
#include <list>
#include <memory>
#include <thread>

#include <boost/asio.hpp>
#include <boost/date_time.hpp>

#include "embxx/util/EventLoop.h"
#include "embxx/driver/Character.h"
#include "cxxtest/TestSuite.h"

#include "CommonEventLoopDefs.h"

class CharacterDriverTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();

private:
    class CharDevice
    {
    public:
        CharDevice(LoopLock& lock)
            : lock_(lock),
              work_(io_),
              timer_(io_),
              readInterruptEnabled_(false),
              writeInterruptEnabled_(false),
              maxBufSize_(5),
              delayMs_(10)
        {

            thread_.reset(
                new std::thread(
                    [this]()
                    {
                        try {
                            io_.run();
                        }
                        catch (const std::exception& e)
                        {
                            TS_FAIL(e.what());
                            assert(!"Mustn't happen");
                        }
                    }));
        }

        void start() {
            programWait();
        }

        void stop() {
            io_.stop();
            thread_->join();
            thread_.reset();
            std::for_each(writeBuf_.begin(), writeBuf_.end(),
                [this](char ch) { writeString_ += ch; });
        }

        void setBufSize(unsigned size)
        {
            TS_ASSERT(0 < size);
            maxBufSize_ = size;
        }

        void setOpDelay(unsigned ms)
        {
            TS_ASSERT(0 < ms);
            delayMs_ = ms;
        }

        template <typename TString>
        void setReadString(TString&& str)
        {
            readString_ = std::forward<TString>(str);
        }

        const std::string& getWriteString() const
        {
            return writeString_;
        }

        void clearWriteString()
        {
            writeString_.clear();
        }

        // Required interface
        typedef char CharType;

        void setReadInterruptEnabled(bool enabled)
        {
            readInterruptEnabled_ = enabled;
        }

        void setWriteInterruptEnabled(bool enabled)
        {
            writeInterruptEnabled_ = enabled;
        }

        bool canRead() const
        {
            return (!readBuf_.empty());
        }

        bool canWrite() const
        {
            return (writeBuf_.size() < maxBufSize_);
        }

        CharType read() {
            auto ch = readBuf_.front();
            readBuf_.pop_front();
            return ch;
        }

        void write(CharType value)
        {
            writeBuf_.push_back(value);
        }

        template <typename TFunc>
        void setCanReadHandler(TFunc&& func)
        {
            canReadHandler_ = std::forward<TFunc>(func);
        }

        template <typename TFunc>
        void setCanWriteHandler(TFunc&& func)
        {
            canWriteHandler_ = std::forward<TFunc>(func);
        }

    private:
        void interruptHandler()
        {
            lock_.lockInterruptCtx();
            if (writeInterruptEnabled_) {
                if (!writeBuf_.empty()) {
                    writeString_ += writeBuf_.front();
                    writeBuf_.pop_front();
                }
                TS_ASSERT(canWrite());
                if (canWriteHandler_) {
                    canWriteHandler_();
                }
            }

            if (readInterruptEnabled_ && (!readString_.empty())) {
                readBuf_.push_back(readString_[0]);
                std::string tempReadString(readString_.begin() + 1U, readString_.end());
                readString_ = std::move(tempReadString);
                TS_ASSERT(canRead());
                if (canReadHandler_) {
                    canReadHandler_();
                }
            }

            lock_.unlockInterruptCtx();
        }

        void programWait()
        {
            timer_.cancel();
            timer_.expires_from_now(boost::posix_time::milliseconds(delayMs_));
            timer_.async_wait(
                [this](const boost::system::error_code& ec)
                {
                    if (ec == boost::asio::error::operation_aborted) {
                        return;
                    }

                    interruptHandler();
                    programWait();
                });
        }

        // Thread
        LoopLock& lock_;
        boost::asio::io_service io_;
        boost::asio::io_service::work work_;
        boost::asio::deadline_timer timer_;
        std::unique_ptr<std::thread> thread_;
        bool readInterruptEnabled_;
        bool writeInterruptEnabled_;

        // Control
        volatile unsigned maxBufSize_;
        volatile unsigned delayMs_;

        // Read section
        std::list<CharType> readBuf_;
        std::string readString_;
        std::function<void ()> canReadHandler_;

        // Write section
        std::list<CharType> writeBuf_;
        std::string writeString_;
        std::function<void ()> canWriteHandler_;
    };
};

void CharacterDriverTestSuite::test1()
{
    typedef embxx::util::EventLoop<132, LoopLock, EventCondition> EventLoop;
    typedef embxx::driver::Character<CharDevice, EventLoop> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setReadString(ReadString);
    device.setOpDelay(2);
    device.start();

    bool asyncReadHandlerCalled = false;
    socket.asyncRead(outArray, ReadString.size(),
        [&el, &outArray, &asyncReadHandlerCalled](embxx::driver::ErrorStatus status, std::size_t size)
        {
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(status, embxx::driver::ErrorStatus::Success);
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    device.stop();
}

void CharacterDriverTestSuite::test2()
{
    typedef embxx::util::EventLoop<132, LoopLock, EventCondition> EventLoop;
    typedef embxx::driver::Character<CharDevice, EventLoop> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string WriteString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    device.setOpDelay(2);
    device.start();

    bool asyncWriteHandlerCalled = false;
    socket.asyncWrite(&WriteString[0], WriteString.size(),
        [&el, &device, &asyncWriteHandlerCalled](embxx::driver::ErrorStatus status, std::size_t size)
        {
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(status, embxx::driver::ErrorStatus::Success);
            TS_ASSERT_EQUALS(size, WriteString.size());
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    device.stop();
    TS_ASSERT_EQUALS(WriteString, device.getWriteString());
}

void CharacterDriverTestSuite::test3()
{
    typedef embxx::util::EventLoop<132, LoopLock, EventCondition> EventLoop;
    typedef embxx::driver::Character<CharDevice, EventLoop> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDE\nFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setReadString(ReadString);
    device.setOpDelay(2);
    device.start();

    bool asyncReadHandlerCalled = false;
    socket.asyncReadUntil(outArray, ReadString.size(), '\n',
        [&el, &outArray, &asyncReadHandlerCalled](embxx::driver::ErrorStatus status, std::size_t size)
        {
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(status, embxx::driver::ErrorStatus::Success);
            TS_ASSERT_EQUALS(size, 6U);
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.begin() + 6U, &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    device.stop();
}

void CharacterDriverTestSuite::test4()
{
    typedef embxx::util::EventLoop<132, LoopLock, EventCondition> EventLoop;
    typedef embxx::driver::Character<
        CharDevice,
        EventLoop,
        embxx::util::StaticFunction<void(embxx::driver::ErrorStatus, std::size_t), 20> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setReadString(CommonString);
    device.setOpDelay(2);
    device.start();

    bool asyncReadHandlerCalled = false;
    bool asyncWriteHandlerCalled = false;
    socket.asyncRead(outArray, CommonString.size(),
        [&el, &outArray, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](embxx::driver::ErrorStatus status, std::size_t size)
        {
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(status, embxx::driver::ErrorStatus::Success);
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray[0]));
            if (asyncWriteHandlerCalled) {
                el.stop();
            }
        });

    socket.asyncWrite(&CommonString[0], CommonString.size(),
        [&el, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](embxx::driver::ErrorStatus status, std::size_t writtenSize)
        {
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(status, embxx::driver::ErrorStatus::Success);
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            if (asyncReadHandlerCalled) {
                el.stop();
            }
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    device.stop();
    TS_ASSERT_EQUALS(CommonString, device.getWriteString());
}
