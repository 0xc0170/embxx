//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <functional>

#include "embxx/util/StaticFunction.h"
#include "embxx/util/assert/CxxTestAssert.h"

#include "cxxtest/TestSuite.h"

class StaticFunctionTestSuite : public CxxTest::TestSuite,
                                public embxx::util::EnableAssert<embxx::util::assert::CxxTestAssert>
{
public:
    void test1();
    void test2();
    void test3();
    void test4();

    template <typename T>
    void incFunc(T& value)
    {
        ++value;
    }
};

void StaticFunctionTestSuite::test1()
{
    typedef embxx::util::StaticFunction<void ()> Func;
    Func func;
    TS_ASSERT(!func);
    TS_ASSERT_EQUALS(false, static_cast<bool>(func));

    Func func2([](){});
    TS_ASSERT(func2);
    TS_ASSERT_EQUALS(false, !func2);
}

void StaticFunctionTestSuite::test2()
{
    typedef embxx::util::StaticFunction<int ()> Func;

    Func func([]() -> int {return 5;});

    TS_ASSERT(func);
    TS_ASSERT_EQUALS(func(), 5);

    func = nullptr;
    TS_ASSERT(!func);
    func = []() -> int {return 10;};
    TS_ASSERT(func);
    TS_ASSERT_EQUALS(func(), 10);

    Func func2([]() -> int {return 15;});
    func = func2;
    TS_ASSERT(func);
    TS_ASSERT(func2);
    TS_ASSERT_EQUALS(func(), 15);

    func = std::move(func2);
    TS_ASSERT(func);
    TS_ASSERT(!func2);

    Func func3(std::move(func));
    TS_ASSERT(func3);
    TS_ASSERT(!func);
    TS_ASSERT_EQUALS(func3(), 15);
}

void StaticFunctionTestSuite::test3()
{
    typedef embxx::util::StaticFunction<int (int)> Func;

    Func func(
        [](int i) -> int
        {
            return 2 * i;
        });

    TS_ASSERT(func);
    TS_ASSERT_EQUALS(func(5), 10);
}

void StaticFunctionTestSuite::test4()
{
    typedef embxx::util::StaticFunction<void (int&), 20> Func;

    int value = 10;
    Func func(
        std::bind(
            &StaticFunctionTestSuite::incFunc<int>,
            this,
            std::placeholders::_1));

    TS_ASSERT(static_cast<bool>(func));
    func(value);
    TS_ASSERT_EQUALS(value, 11);
}



